const vath = require('vath')

const printAll = false;

const v_test_res = [];

const v_add_tests = [{
        desc: "No input values [ ??? + ??? => ??? ]",
        pass: false,
        test() {
            return v_add();
        },
        expected: "ERROR: Missing Params vath.v_add(x,y)"
    },
    {
        desc: "Missing Second Input Variable [ 11 + missing => ??? ]",
        pass: false,
        test() {
            return v_add(11);
        },
        expected: "ERROR: Missing Params vath.v_add(x,y)"
    },
    {
        desc: "Input Variables Are OK [ 22 + 55 => 77]",
        pass: false,
        test() {
            return v_add(22, 55);
        },
        expected: 77
    },
    {
        desc: "[TestFailing_DEMO] Input Variables Are OK {but expected is set to 771 \n| while we are doing same thing [ 22 + 55 = 77(1 <- example of human error ] as previous one only with mistake}",
        pass: false,
        test() {
            return v_add(22, 55);
        },
        expected: 771,
        ignored: true
    },
    {
        desc: "Lets send it some text",
        pass: false,
        test() {
            return v_add("22", 55);
        },
        expected: '2255'
    },
    {
        desc: "Lets send it some text",
        pass: false,
        test() {
            return v_add("22", 55);
        },
        expected: "2255"
    }

];
for (let itemIndex in v_add_tests) {
    let item = v_add_tests[itemIndex];
    item.gotFromTest = item.test();
    item.gotFromTestType = typeof item.gotFromTest;
    item.expectedType = typeof item.expected;
    if ((item.gotFromTest === item.expected) && (item.gotFromTestType === item.expectedType)){
        item.pass = true;
    }
}

if (printAll) {
    console.log('/================================================================\\');
    console.log('| PRINTING OBJECT [ v_add_tests ]                                |')
    console.log('+----------------------------------------------------------------+')
    console.log(v_add_tests);
    console.log('+----------------------------------------------------------------+')
    console.log('| END OF OBJECT [ v_add_tests ]                                  |')
    console.log("\\===============================================================/")
}

var numberOfIgnored = 0;

v_add_tests.forEach(item => {
    if (item.pass === false) {
        if (typeof item.ignored != undefined) {
            if (item.ignored !== true){
                v_test_res.push(item)
            } else {
                if (printAll){
                    console.log("ingnored");
                }
                numberOfIgnored++;
            }
        } else {
            v_test_res.push(item);
        }
    }
});

console.log("")
console.log('Testing Results [ vath.v_add() ]:')
console.log("-> Number of tests: [ "+ v_add_tests.length +" ]");
console.log("-> Passing Tests Number: [ "+ (v_add_tests.length - (v_test_res.length + numberOfIgnored)) +" ]");
console.log("-> Failed Tests: [ "+ v_test_res.length +" ]");
console.log("-> Ignored Tests: [ "+ numberOfIgnored +" ]");
console.log((v_test_res.length == 0)? "Test Status <-<[_OK_]>->" : "<-!-> WARNING: Test Status => [FAILED] <-!->")

v_test_res.forEach(item => {
    console.log('')
    console.log('/= Failing Test Results ===========================================\\');
    console.log(`| Expected [ type -> ${item.expectedType} || value -> ${item.expected} ]`);
    console.log('|----------------------------------------------------------------|')
    console.log(`| Resulted with [ type -> ${item.gotFromTestType} || value -> ${item.gotFromTest} ]`);
    console.log('|----------------------------------------------------------------|')
    console.log(`| Test Descr.: ${item.desc} `);
    console.log('\\===============================================================/')
})



// Setup of constant for test result export
const v_test_res_add = v_test_res;
// and the export of it.
module.exports = v_test_res_add;